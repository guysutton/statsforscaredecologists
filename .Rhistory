dplyr::mutate(best_model_lrt = dplyr::if_else(lrt_p < 0.05, "mod_trt", "mod_null")) %>%
dplyr::ungroup() %>%
dplyr::count(best_model_lrt) %>%
dplyr::select(model = best_model_lrt,
n) %>%
dplyr::mutate(model_selection = "LRT")
models_lrt
# Combine summaries
models_comp_16 <- dplyr::bind_rows(models_aic, models_lrt)
models_comp_16
###########################################################################
# Compare AICc vs LRT -----------------------------------------------------
###########################################################################
models_comp_16 %>%
ggplot(data = ., aes(x = model_selection,
y = n,
fill = model)) +
geom_col(position = "dodge") +
labs(title = "Model selection - poisson counts when 16% higher in trt group",
subtitle = "AICc selected more complex model vs Likelihood-Ratio Test",
x = "Model selection process",
y = "Number of simulations",
fill = "Best model")
library(distill)
create_post(
title = "Adding italics to ggplot figures", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
tidyr,
ggtext,
palmerpenguins,
here,
cowplot)
```
Let's load the [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) dataset into `R`. This dataset contains body morphology measurements for a range of penguin species from the Antarctic islands ([Gorman et al. 2014](https://doi.org/10.1371/journal.pone.0090081)).
```{r load_data}
# Load raw penguins data
penguins <- palmerpenguins::penguins %>%
# Remove rows containing NA data
tidyr::drop_na(body_mass_g)
head(penguins)
```
# Figure 1
Let's assume we have analysed our dataset, and we now want to plot some figures. Let's go ahead and make a basic figure, and we will incrementally make changes to the figure to make it publication ready.
### Step 1: Plot basic figure
In the first figure, we will plot the flipper length (in mm) on the x-axis and body mass (in g) on the y-axis, and colour the data points according to penguin species.
```{r plot_figure1}
penguins %>%
ggplot(data = ., aes(x = flipper_length_mm,
y = body_mass_g,
colour = species)) +
geom_point()
```
### Step 2: Set default ggplot theme
The first thing I recommend is changing the default `ggplot2` theme to make the figures look a little neater and prettier (at least to my tastes!). There are a range of built-in themes that you can use (e.g. `theme_classic()`, `theme_bw`, ect...), but I like the theme below that I have manually written.
```{r set_ggplot_theme}
# Change and set default ggplot theme
theme_set(theme_classic() +
theme(panel.border = element_rect(colour = "black",
fill = NA),
axis.text = element_text(colour = "black"),
axis.title.x = element_text(margin = unit(c(2, 0, 0, 0),
"mm")),
axis.title.y = element_text(margin = unit(c(0, 4, 0, 0),
"mm"))))
```
Now, remake the figure from above. Notice the difference in appearance? Whenever we make a new plot, the theme we set above will automatically be applied. Nifty.
```{r plot_figure1_themed}
penguins %>%
ggplot(data = ., aes(x = flipper_length_mm,
y = body_mass_g,
colour = species)) +
geom_point()
```
### Step 3: Changing axis labels and adding a title
```{r figure1_edit_axis}
penguins %>%
ggplot(data = ., aes(x = flipper_length_mm,
y = body_mass_g,
colour = species)) +
geom_point() +
# Change the labels of axes and legend
labs(
x = "Flipper length (mm)",
y = "Body mass (g)",
colour = "Penguin species",
title = "Do larger penguins (Pygoscelis spp.) weigh more?"
)
```
### Step 4: Adding italics to title
While we have always been able to add italics to a `ggplot2` figure, the code has always been pretty messy and confusing, in my opinion. It would take me many attempts to finally get the italics in the correct place... Maybe it is just me, but I don't think so...
Enter the amazing [ggtext](https://github.com/wilkelab/ggtext) package. This package allows us to use markdown language and/or HTML to edit our `ggplot2` figures by using the function `element_markdown()`. If you don't know any markdown, don't worry. There are many nice [introductions to markdown](https://rmarkdown.rstudio.com/lesson-1.html), but even better, to italise any text in our `ggplot2` figure, we simply need to put that text within a * either side of the word or phrase. For example, to make the word 'Panthera' italised, we need to type `*Panthera*`.
Let's test it out and make the genus name for our penguins (*Pygoscelis*) italicised in our figure.
```{r figure1_italics_title}
penguins %>%
ggplot(data = ., aes(x = flipper_length_mm,
y = body_mass_g,
colour = species)) +
geom_point() +
# Change the labels of axes and legend
labs(
x = "Flipper length (mm)",
y = "Body mass (g)",
colour = "Penguin species",
# We place * ___ * around the word we want italicised
title = "Do larger penguins (*Pygoscelis* spp.) weigh more?"
) +
# Use ggtext to specify that the axis title should be interpreted as markdown text
theme(
plot.title = ggtext::element_markdown()
)
```
This looks like a pretty good figure to me. Let's set this aside and pat ourselves on the back for a figure well made. :)
# Figure 2
Let's now make a second figure to demonstrate the power of `element_markdown()` and demonstrate how to add italicised text to our axis labels and figure legend. As above, we will go ahead and make a basic figure, and then incrementally make changes to the figure to make it publication ready.
### Step 1: Plot basic figure
In this second figure, we will plot the body mass (in g) on the y-axis and the penguin species on the x-axis, and colour the data points according to penguin species. We will use the `scale_fill_grey` function to colour the species-specific boxplots in greyscale. The start and end options specified within `scale_fill_grey` below make the shades lightgrey instead of dark grey/black (if you want darker shades, change this to: start = 0.2, end = 0.6).
```{r}
# Make a basic graph
penguins %>%
ggplot(data = ., aes(x = species,
y = body_mass_g,
fill = species)) +
geom_boxplot() +
# Make the boxplots different shades of grey
scale_fill_grey(start = 0.5, end = 0.9) +
labs(
x = NULL,
y = "Body mass (g)",
fill = "Penguin species",
)
```
### Step 2: Add species names to x-axis labels
Now, let's add the genus and species names to the x-axis along with the common name of each penguin. For example, the species name of the Adelie penguin is *Pygoscelis adeliae* or *P. adeliae*, the Chinstrap penguin is *P. antarcticus*, and the Gentoo penguin is *P. papua*. There are many ways to do this. We are going to manually change the names in the raw data before plotting (you could also use `scale_x_discrete`, if you really wanted).
```{r figure2_add_species}
# Now italicise and place species on own line (with fill)
penguins %>%
# Here, we loop through the species names, and if the species name == x, change it to the name given to the right of ~
dplyr::mutate(species = dplyr::case_when(
# e.g. If species = 'Adelie', change to 'Adelie (P. adeliae)'
species == "Adelie" ~ "Adelie (P. adeliae)",
species == "Chinstrap" ~ "Chinstrap (P. antarcticus)",
species == "Gentoo" ~ "Gentoo (P. papua)"
)) %>%
ggplot(data = ., aes(x = species,
y = body_mass_g,
fill = species)) +
geom_boxplot() +
scale_fill_grey(start = 0.5, end = 0.9) +
labs(
x = NULL,
y = "Body mass (g)",
fill = "Penguin species"
)
```
### Step 3: Move species name to a new line below common name
The x-axis labels look a bit silly in the above graph. It looks so messy having the common and species names on the same line. Let's move the species name to its own line below the common name in the x-axis label. Welcome back `element_markdown()`.
We are going to leverage the power of using `element_markdown()` to use HTML to insert a linebreak between the common name and species name. To insert a linebreak in HTML, we just need to add `<br>` wherever we want the linebreak.
```{r figure2_new_line}
# Use HTML linebreaks to split common and species names in x-axis labels
penguins %>%
# Add <br> where you want the linebreak to occur
dplyr::mutate(species = dplyr::case_when(
species == "Adelie" ~ "Adelie <br> (P. adeliae)",
species == "Chinstrap" ~ "Chinstrap <br> (P. antarcticus)",
species == "Gentoo" ~ "Gentoo <br> (P. papua)"
)) %>%
ggplot(data = ., aes(x = species,
y = body_mass_g,
fill = species)) +
geom_boxplot() +
scale_fill_grey(start = 0.5, end = 0.9) +
labs(
x = NULL,
y = "Body mass (g)",
fill = "Penguin species"
) +
# Use ggtext to specify that the x-axis text and legend text should be interpreted as markdown text
theme(
axis.text.x = element_markdown(),
legend.text = element_markdown()
)
```
### Step 4: Make species names into italics
Much like for Figure 1, we can now make the species names italicised using `* ___ *` and `element_markdown()`.
```{r figure2_italics, preview = TRUE}
# Make species names italicised
penguins %>%
# Remember, to make a word/phrase italic, put it in * _____ *
dplyr::mutate(species = dplyr::case_when(
species == "Adelie" ~ "Adelie <br> (*P. adeliae*)",
species == "Chinstrap" ~ "Chinstrap <br> (*P. antarcticus*)",
species == "Gentoo" ~ "Gentoo <br> (*P. papua*)"
)) %>%
ggplot(data = ., aes(x = species,
y = body_mass_g,
fill = species)) +
geom_boxplot() +
scale_fill_grey(start = 0.5, end = 0.9) +
labs(
x = NULL,
y = "Body mass (g)",
fill = "Penguin species"
) +
# Use ggtext to specify that the x-axis text and legend text should be interpreted as markdown text
theme(
axis.text.x = element_markdown(),
legend.text = element_markdown()
) +
# Increase the space between legend items (looks a bit nicer)
theme(
legend.key.height = unit(1.2, 'cm')
)
```
ggsave("./penguin_plot_italics.png",
dpi = 600,
height = 6,
width = 6)
ggsave("./_posts/2021-09-17-adding_italics-to-ggplot-figures/penguin_plot_italics.png",
dpi = 600,
height = 6,
width = 6)
# Save qqplot above to disc
ggsave("./_posts/2021-09-17-adding-italics-to-ggplot-figures/penguin_plot_italics.png",
dpi = 600,
height = 6,
width = 6)
ggsave(here::here("./_posts/2021-09-17-adding-italics-to-ggplot-figures/penguin_plot_italics.png"),
dpi = 600,
height = 6,
width = 8)
data("iris")
iris <- data("iris")
head(iris)
data("iris")
head(iris)
pc <- prcomp(iris[,-5],
center = FALSE,
scale. = FALSE)
attributes(pc)
library(ggbiplot)
install_github("vqv/ggbiplot")
library(devtools)
library(ggbiplot)
pc <- prcomp(iris[,-5],
center = FALSE,
scale. = FALSE)
summary(pc)
library(ggofortify)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
head(iris)
autoplot(pc, data = iris, colour = 'Species')
autoplot(pc,
data = iris,
colour = 'Species')
summary(pc)
pc <- princomp(iris[,-5],
center = FALSE,
scale. = FALSE)
summary(pc)
pc2 <- prcomp(iris[,-5],
center = FALSE,
scale. = FALSE)
# Plot the PCA ordination
library(ggfortify)
# Plot the PCA ordination
autoplot(pc,
data = iris,
colour = 'Species')
autoplot(pc, data = iris, colour = 'Species',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
attributes(pc)
library(distill)
create_post(
title = "R vs Julia: Principal Component Analysis (PCA)", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
library(distill)
create_post(
title = "Species accumulation curves in R: Part 1. Species richness estimates",
# mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
# Load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
tidyr,
janitor,
vegan)
# Read in data
sp_comm <- readr::read_csv("https://raw.githubusercontent.com/guysutton/CBC_coding_club/master/data_raw/species_abundance_matrix_ex.csv") %>%
# Clean column names
janitor::clean_names()
# Check data entry
dplyr::glimpse(sp_comm)
# Set ggplot theme
theme_set(theme_classic() +
theme(panel.border = element_rect(colour = "black", fill = NA),
axis.text = element_text(colour = "black"),
axis.title.x = element_text(margin = unit(c(2, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 4, 0, 0), "mm")),
legend.position = "none"))
# Check data entry
dplyr::glimpse(sp_comm)
sac_raw <- sp_comm %>%
# Remove site decsription variables
dplyr::select(-c(provinces, climatic_zones, site, season, haplotype)) %>%
# Compute SAC
vegan::poolaccum(.)
obs <- data.frame(summary(sac_raw)$S, check.names = FALSE)
colnames(obs) <- c("N", "S", "lower2.5", "higher97.5", "std")
head(obs)
ggplot(data = obs, aes(x = N,
y = S)) +
# Add confidence intervals
geom_ribbon(aes(ymin = lower2.5,
ymax = higher97.5),
alpha = 0.5,
colour = "gray70") +
# Add observed richness line
geom_line() +
labs(x = "No. of surveys",
y = "Observed richness",
subtitle = "More surveys are required to find all the insects on this plant")
ggsave(here::here("./_posts/2022-01-14-species-accumulation-curves-in-r-part-1-species-richness-estimates/sac_plot_1.png"),
dpi = 600,
height = 6,
width = 8)
ggsave(here::here("./_posts/2022-01-14-species-accumulation-curves-in-r-part-1-species-richness-estimates/sac_plot_1.png"),
dpi = 600,
height = 6,
width = 8)
ggplot(data = obs, aes(x = N,
y = S)) +
# Add confidence intervals
geom_ribbon(aes(ymin = lower2.5,
ymax = higher97.5),
alpha = 0.5,
colour = "gray70") +
# Add observed richness line
geom_line() +
labs(x = "No. of surveys",
y = "Observed richness",
subtitle = "More surveys are required to find all the insects on this plant")
knitr::include_graphics(here::here("./_posts/2022-01-14-species-accumulation-curves-in-r-part-1-species-richness-estimates/sac_plot_1.png"), dpi = NA)
# Read in data
sp_comm <- readr::read_csv("https://raw.githubusercontent.com/guysutton/CBC_coding_club/master/data_raw/species_abundance_matrix_ex.csv") %>%
# Clean column names
janitor::clean_names()
# Check data entry
dplyr::glimpse(sp_comm)
create_post(
title = "Species accumulation cures in R: Part 1", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
library(distill)
create_post(
title = "Species accumulation cures in R: Part 1", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
knitr::include_graphics(here::here("./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png"), dpi = 600,
width = 6,
height = 6)
ggplot::ggsave(
"./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png",
width = 6,
height = 6
)
ggplot2::ggsave(
"./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png",
width = 6,
height = 6
)
# Load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
tidyr,
janitor,
vegan)
# Read in data
sp_comm <- readr::read_csv("https://raw.githubusercontent.com/guysutton/CBC_coding_club/master/data_raw/species_abundance_matrix_ex.csv") %>%
# Clean column names
janitor::clean_names()
# Check data entry
dplyr::glimpse(sp_comm)
# Set ggplot theme
theme_set(theme_classic() +
theme(panel.border = element_rect(colour = "black", fill = NA),
axis.text = element_text(colour = "black"),
axis.title.x = element_text(margin = unit(c(2, 0, 0, 0), "mm")),
axis.title.y = element_text(margin = unit(c(0, 4, 0, 0), "mm")),
legend.position = "none"))
sac_raw <- sp_comm %>%
# Remove site decsription variables
dplyr::select(-c(provinces, climatic_zones, site, season, haplotype)) %>%
# Compute SAC
vegan::poolaccum(.)
# Extract observed richness (S) estimate
obs <- data.frame(summary(sac_raw)$S, check.names = FALSE)
colnames(obs) <- c("N", "S", "lower2.5", "higher97.5", "std")
head(obs)
obs %>%
ggplot(data = ., aes(x = N,
y = S)) +
# Add confidence intervals
geom_ribbon(aes(ymin = lower2.5,
ymax = higher97.5),
alpha = 0.5,
colour = "gray70") +
# Add observed richness line
geom_line() +
labs(x = "No. of surveys",
y = "Observed richness",
subtitle = "More surveys are required to find all the insects on this plant")
ggsave(
"./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png",
width = 6,
height = 6
)
ggsave(
"./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png",
width = 8,
height = 6
)
ggsave(
"./_posts/2022-01-14-species-accumulation-cures-in-r-part-1/basic_sac_plot.png",
width = 8,
height = 6,
dpi = 600
)
distill::create_post(
title = "Import and combine multiple .csv files using R and Julia", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
data_filename <-
# Tell R where to find the .csv files you want to import
list.files(file.path("data_raw"),
full.names = TRUE,
pattern = ".csv") %>%
# Get filenames and remove the .csv extension code
purrr::set_names(nm = (basename(.) %>% tools::file_path_sans_ext()))
# Import the files into a single dataframe with a column containing the filename
purrr::map_dfr(readr::read_csv, .id = "filename")
library(tidyverse)
library(purrr)
# Import the files into a single dataframe with a column containing the filename
purrr::map_dfr(readr::read_csv, .id = "filename")
data_filename <-
# Tell R where to find the .csv files you want to import
list.files(file.path("data_raw"),
full.names = TRUE,
pattern = ".csv") %>%
# Get filenames and remove the .csv extension code
purrr::set_names(nm = (basename(.) %>% tools::file_path_sans_ext())) %>%
# Import the files into a single dataframe with a column containing the filename
purrr::map_dfr(readr::read_csv, .id = "filename")
getwd()
data <-
# Step 1: Tell R where to find the .csv files you want to import
list.files(file.path("data_raw"),
full.names = TRUE,
pattern = ".csv") %>%
# Step 2: Import the files into a single dataframe
purrr::map_dfr(readr::read_csv)
class(data)
# Look at the first 6 rows
head(data)
?Salamanders
library(glmmTMB)
?Salamanders
library(distill)
create_post(
title = "Building your first Bayesian GLM using Turing.jl in Julia", # mandatory
author = "auto",
slug = "auto", # generates a website slug (URL)
date_prefix = TRUE, # adds date for sorting
draft = TRUE,
edit = interactive()
)
Pkg.add("Reexport")
